% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/module-package.R
\name{useModules}
\alias{useModules}
\alias{initModules}
\title{Use modules in package build process}
\usage{
useModules(folder = ".")

initModules(folder = ".")
}
\arguments{
\item{folder}{(character) the folder where to create the configuration file:
the package root.}
}
\description{
This function will create a configuration file, such that sub folders inside
the R folder of a package are used as module definition. It will then compile
all modules.
}
\details{
Guiding principles: (1) this is R CMD check compliant (2) we do not
  introduce new logic to the semantics of R code.

What does it mean to have sub-folders in packages? Each folder defines a
  module. The name of the module is the name of the folder. Having several R
  files in a sub-folder adds no additional logic. All files are sourced into
  the same environment. As with packages, we can make objects public by
  exporting them. As with packages, nested sub-folders are currently ignored.

Each sub-folder is compiled into one module, represented by a regular R file
  in the package. The file is auto-generated and managed by the build
  process. The presence of this file enables to take advantage of R CMD
  check. Hence checks may refer to the target file, however changes need to
  happen inside the module/sub-folder itself.
}
